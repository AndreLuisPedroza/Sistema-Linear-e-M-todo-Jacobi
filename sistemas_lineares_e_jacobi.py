# -*- coding: utf-8 -*-
"""sistemas-lineares-e-jacobi.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/gist/AndreLuisPedroza/1f3514c0ee7620cd5aca206ebcc3dded/sistemas-lineares-e-jacobi.ipynb
"""

#Sistema Lineares
import numpy as np
from numpy.linalg import inv

# Criando a Matriz A
# 2x + 5y = -1
# 3x - 2y = 5

A = np.array([[2,5],[3,-2]]) #mais um colchete indicando que estamos criando uma matriz
B = np.array([-1,5]) #vetor, apenas 1 colchete

#encontrar a inversa da Matriz A
inversa = inv(A)
#Solução
x = np.matmul(inversa,B)
print("Solução para a Variável X = {}".format(x[0]))
print("Solução para a variável Y = {}".format(x[1]))

#método Jacobi
# 10x1 + 2x2 +   x3 =  7
#   x1 + 5x2 +   x3 = -8
#  2x1 + 3x2 + 10x3 =  6

A = np.array([[10,2,1],[1,5,1],[2,3,10]])
b = np.array([7,-8,6])

linha, coluna = A.shape

B = np.zeros((linha,coluna))
g = np.zeros(coluna)

for i in range(0,linha):
  B[i,:] = A[i,:]/A[i,i]
  g[i] = b[i]/A[i,i]
  B[i,i] = 0;

B = -B
print(B)

numeroiteracao = 10
x = np.zeros(coluna)
for i in range(numeroiteracao):
  x = np.matmul(B,x) + g
  print(x)